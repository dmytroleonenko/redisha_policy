{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "VPC: public subnets in 3 AZs",
	"Parameters": {
		"ClassB": {
			"Description": "Class B subnet of VPC (10.XXX.0.0/16)",
			"Type": "String",
			"MinLength": "1",
			"MaxLength": "3"
		},
		"KeyName": {
			"Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
			"Type": "AWS::EC2::KeyPair::KeyName",
			"ConstraintDescription": "must be the name of an existing EC2 KeyPair."
		}
	},
	"Resources": {
		"VPC": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"CidrBlock": {
					"Fn::Join": ["", ["10.", {
						"Ref": "ClassB"
					}, ".0.0/16"]]
				},
				"EnableDnsSupport": true,
				"EnableDnsHostnames": true,
				"InstanceTenancy": "default",
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": ["", ["10.", {
							"Ref": "ClassB"
						}, ".0.0/16"]]
					}
				}]
			}
		},
		"InternetGateway": {
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": ["", ["10.", {
							"Ref": "ClassB"
						}, ".0.0/16"]]
					}
				}]
			}
		},
		"VPCGatewayAttachment": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"InternetGatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},
		"SubnetPublicA": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"AvailabilityZone": {
					"Fn::Select": ["0", {
						"Fn::GetAZs": ""
					}]
				},
				"CidrBlock": {
					"Fn::Join": ["", ["10.", {
						"Ref": "ClassB"
					}, ".0.0/20"]]
				},
				"MapPublicIpOnLaunch": true,
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [{
					"Key": "Name",
					"Value": "Public A"
				}, {
					"Key": "Reach",
					"Value": "public"
				}]
			}
		},
		"SubnetPublicB": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"AvailabilityZone": {
					"Fn::Select": ["1", {
						"Fn::GetAZs": ""
					}]
				},
				"CidrBlock": {
					"Fn::Join": ["", ["10.", {
						"Ref": "ClassB"
					}, ".32.0/20"]]
				},
				"MapPublicIpOnLaunch": true,
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [{
					"Key": "Name",
					"Value": "Public B"
				}, {
					"Key": "Reach",
					"Value": "public"
				}]
			}
		},
		"SubnetPublicC": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"AvailabilityZone": {
					"Fn::Select": ["2", {
						"Fn::GetAZs": ""
					}]
				},
				"CidrBlock": {
					"Fn::Join": ["", ["10.", {
						"Ref": "ClassB"
					}, ".64.0/20"]]
				},
				"MapPublicIpOnLaunch": true,
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [{
					"Key": "Name",
					"Value": "Public C"
				}, {
					"Key": "Reach",
					"Value": "public"
				}]
			}
		},
		"RouteTablePublic": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [{
					"Key": "Name",
					"Value": "Public"
				}]
			}
		},
		"RouteTableAssociationPublicA": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "SubnetPublicA"
				},
				"RouteTableId": {
					"Ref": "RouteTablePublic"
				}
			}
		},
		"RouteTableAssociationPublicB": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "SubnetPublicB"
				},
				"RouteTableId": {
					"Ref": "RouteTablePublic"
				}
			}
		},
		"RouteTableAssociationPublicC": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "SubnetPublicC"
				},
				"RouteTableId": {
					"Ref": "RouteTablePublic"
				}
			}
		},
		"RouteTablePublicInternetRoute": {
			"Type": "AWS::EC2::Route",
			"DependsOn": "VPCGatewayAttachment",
			"Properties": {
				"RouteTableId": {
					"Ref": "RouteTablePublic"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"GatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},
		"NetworkAclPublic": {
			"Type": "AWS::EC2::NetworkAcl",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [{
					"Key": "Name",
					"Value": "Public"
				}]
			}
		},
		"SubnetNetworkAclAssociationPublicA": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "SubnetPublicA"
				},
				"NetworkAclId": {
					"Ref": "NetworkAclPublic"
				}
			}
		},
		"SubnetNetworkAclAssociationPublicB": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "SubnetPublicB"
				},
				"NetworkAclId": {
					"Ref": "NetworkAclPublic"
				}
			}
		},
		"SubnetNetworkAclAssociationPublicC": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "SubnetPublicC"
				},
				"NetworkAclId": {
					"Ref": "NetworkAclPublic"
				}
			}
		},
		"NetworkAclEntryInPublicAllowAll": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "NetworkAclPublic"
				},
				"RuleNumber": "99",
				"Protocol": "-1",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0"
			}
		},
		"NetworkAclEntryOutPublicAllowAll": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "NetworkAclPublic"
				},
				"RuleNumber": "99",
				"Protocol": "-1",
				"RuleAction": "allow",
				"Egress": "true",
				"CidrBlock": "0.0.0.0/0"
			}
		},
		"RedisSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Allow redis and sentinel traffic",
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [{
					"Key": "Name",
					"Value": "RedisSecurityGroup"
				}]
			},
			"DependsOn": "VPC"
		},
		"RedisSecurityGroupIngress": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Ref": "RedisSecurityGroup"
				},
				"IpProtocol": "tcp",
				"ToPort": "6379",
				"FromPort": "6379",
				"SourceSecurityGroupId": {
					"Ref": "RedisSecurityGroup"
				}
			},
			"DependsOn": "RedisSecurityGroup"
		},
		"SentinelSecurityGroupIngress": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Ref": "RedisSecurityGroup"
				},
				"IpProtocol": "tcp",
				"ToPort": "46379",
				"FromPort": "46379",
				"SourceSecurityGroupId": {
					"Ref": "RedisSecurityGroup"
				}
			},
			"DependsOn": "RedisSecurityGroup"
		},
		"RedisInitialSeed": {
			"Type": "AWS::EC2::Instance",
			"DependsOn": [ "InternetGateway", "RedisSecurityGroup", "RouteTablePublicInternetRoute" ],
			"Properties": {
				"KeyName": {
					"Ref": "KeyName"
				},
				"SecurityGroupIds" : [ {"Ref" : "RedisSecurityGroup"} ],
				"SubnetId": {"Ref" : "SubnetPublicA"},
				"InstanceType": "t2.micro",
				"ImageId": "ami-4f680658",
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							{ "Fn::FindInMap": ["Constants", "InstanceValues", "userDataPre"]},
							{"Fn::FindInMap": ["Constants", "InstanceValues", "firstRunInitialSeed"]},
							{"Fn::FindInMap": ["Constants", "InstanceValues", "userDataPost"]},
							{
								"Ref": "AWS::StackName"
							},
							"\n"
						]]
					}
				},
				"Tags": [{
					"Key": "Name",
					"Value": "redis"
				}, {
					"Key": "initialSeed",
					"Value": "true"
				}]
			},
			"CreationPolicy": {
				"ResourceSignal": {
					"Timeout": "PT10M"
				}
			}
		},
		"Redis1": {
			"Type": "AWS::EC2::Instance",
			"DependsOn": [ "InternetGateway", "RedisInitialSeed", "RedisSecurityGroupIngress" ],
			"Properties": {
				"KeyName": {
					"Ref": "KeyName"
				},
				"SecurityGroupIds" : [ {"Ref" : "RedisSecurityGroup"} ],
				"SubnetId": {"Ref" : "SubnetPublicA"},
				"InstanceType": "t2.micro",
				"ImageId": "ami-4f680658",
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							{ "Fn::FindInMap": ["Constants", "InstanceValues", "userDataPre"]},
							{"Fn::FindInMap": ["Constants", "InstanceValues", "firstRun"]},
							{"Fn::FindInMap": ["Constants", "InstanceValues", "userDataPost"]},
							{
								"Ref": "AWS::StackName"
							},
							"\n"
						]]
					}
				},
				"Tags": [{
					"Key": "Name",
					"Value": "redis"
				}]
			}
		},
		"Redis2": {
			"Type": "AWS::EC2::Instance",
			"DependsOn": [ "InternetGateway", "RedisInitialSeed", "RedisSecurityGroupIngress" ],
			"Properties": {
				"KeyName": {
					"Ref": "KeyName"
				},
				"SecurityGroupIds" : [ {"Ref" : "RedisSecurityGroup"} ],
				"SubnetId": {"Ref" : "SubnetPublicA"},
				"InstanceType": "t2.micro",
				"ImageId": "ami-4f680658",
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							{ "Fn::FindInMap": ["Constants", "InstanceValues", "userDataPre"]},
							{"Fn::FindInMap": ["Constants", "InstanceValues", "firstRun"]},
							{"Fn::FindInMap": ["Constants", "InstanceValues", "userDataPost"]},
							{
								"Ref": "AWS::StackName"
							},
							"\n"
						]]
					}
				},
				"Tags": [{
					"Key": "Name",
					"Value": "redis"
				}]
			}
		},
		"Redis3": {
			"Type": "AWS::EC2::Instance",
			"DependsOn": [ "InternetGateway", "RedisInitialSeed", "RedisSecurityGroupIngress" ],
			"Properties": {
				"KeyName": {
					"Ref": "KeyName"
				},
				"SecurityGroupIds" : [ {"Ref" : "RedisSecurityGroup"} ],
				"SubnetId": {"Ref" : "SubnetPublicA"},
				"InstanceType": "t2.micro",
				"ImageId": "ami-4f680658",
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							{ "Fn::FindInMap": ["Constants", "InstanceValues", "userDataPre"]},
							{"Fn::FindInMap": ["Constants", "InstanceValues", "firstRun"]},
							{"Fn::FindInMap": ["Constants", "InstanceValues", "userDataPost"]},
							{
								"Ref": "AWS::StackName"
							},
							"\n"
						]]
					}
				},
				"Tags": [{
					"Key": "Name",
					"Value": "redis"
				}]
			}
		}
	},

	"Outputs": {
		"VPC": {
			"Description": "VPC.",
			"Value": {
				"Ref": "VPC"
			}
		},
		"SubnetPublicA": {
			"Description": "Subnet public A.",
			"Value": {
				"Ref": "SubnetPublicA"
			}
		},
		"SubnetPublicB": {
			"Description": "Subnet public B.",
			"Value": {
				"Ref": "SubnetPublicB"
			}
		},
		"SubnetPublicC": {
			"Description": "Subnet public C.",
			"Value": {
				"Ref": "SubnetPublicC"
			}
		},
		"RouteTablePublic": {
			"Description": "Route table public.",
			"Value": {
				"Ref": "RouteTablePublic"
			}
		},
		"SecurityGroup": {
			"Description": "Security Group id",
			"Value": {
				"Ref": "RedisSecurityGroup"
			}
		}
	},
	"Mappings": {
		"Constants": {
			"InstanceValues": {
				"userDataPre": "#!/bin/bash -xe\napt-get update && apt-get install -y python-pip && pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\nmkdir /etc/chef;",
				"firstRunInitialSeed": "cat >/etc/chef/first-run.json <<EOF\n{\n  \"run_list\": [ \"recipe[redis-multi::master]\", \"role[redis-ha]\" ],\n  \"redis-multi\": {\n    \"redis_master\": \"$(ip a li eth0 |grep 'inet ' |cut -d' ' -f6|cut -d/ -f1)\"\n}\n}\nEOF\n",
				"firstRun": "cat >/etc/chef/first-run.json <<EOF\n{\n  \"run_list\": [ \"recipe[redis-multi::slave]\", \"role[redis-ha]\" ]\n}\nEOF\n",
				"userDataPost": "cat >/etc/chef/client.rb <<EOF\nlog_level        :info\nlog_location     STDOUT\nchef_server_url  'https://api.opscode.com/organizations/nclnc'\nvalidation_client_name 'nclnc-validator'\nvalidation_key '/etc/chef/validator.pem'\nEOF\ncat >/etc/chef/validator.pem <<EOF\n-----BEGIN RSA PRIVATE KEY-----\nMIIEpQIBAAKCAQEA7Ipo2l9JC+mML2pNiSCsTnE1zKaKYZaMc41T0Uf2OCw4M4IF\nXilpjxIKAcHU35bwfsxDORTAxhf/CX9GtvKGKjnlj5Wgl3Qrwarh2iKqLEohsC++\nzFLJRUUYAbHgUHGHGhvmjqAxAbWa6b+kf0q3CNlCEW9eYvLBHnhqyJsBxNC8CA9B\n8o5c1F4SRnS06JC5htbrRiVQCSOtOyZAW3nEyKLj52AQMYITlWO0ljBGiZ1YULQB\nokc6aRtcrV7sS8H+vmwUBuiJ7zt9nOdLAtL4YuvDn/LfL3t3+uq4SY3PZUwc1l/1\n3J73Zjn+0pygZK0tHirH8Dxz+pT0NkAONK5npwIDAQABAoIBAQDheYI/foq7zzEw\n1Wz5ZOq6j1HQNYQ9R+u0Diiymp0KqKQd/TeurV0Q4wok6KZJR7ERvRXrKGwlqCQU\n4nz+0SmwwKWhe+ir1jILlx9Y9qguNa/tKWX/kH6JCDa9Dtia9czpx2S72dk9HuZ/\nII3mRMs6pRZEVluriGkr6W8osBE8kELwkVzu9MBOnGtX/VJPfh030pwZKkPU/mII\nkJ8Z1+uVZF6Q68vfV380Ysqzp7sTEn8YSfryahtyX1IpZdAgO4ty+ZrwM6IB7vzY\nX55jXO5EbbJZQrUIk+xeV0jQWV9HuDUEUIXLIlBI5OJwbuWZVzJaFlNegWFyc2a6\ncXSVZiSxAoGBAP7GY0cI8Vjrm/SHMOoZRXEzcKE1RtM9D+BDyGp+lnhllTB9zHBt\nt82yQJb26NnpUjBBjyZ9lCBTvP4vE8aJYfQstZqrz5LqSLFxdHrqiaIaGakv0fmj\nskLBDRJXyvoKofOjvSWJNhOD0rHHBvXKq6vV1aUJdU8lr6WSyaLbso2/AoGBAO2t\nk5VQ6h7MVAF6ZqTGFqRedvB9pG2t0D8jW+LcBvkUVDSUx4M20yztazfKH/iIjVY/\nWwAphL4ulX75dc30DzlJiDm5dBXCbFFPHmrls18r3GodGccD+Cp+F9u38nXzVpTK\nR91QP/NO255Xm4a6QuRzWokWYl5UeONlpzaChXAZAoGBAJl7eGldyM9xuNUZ8GzG\n5p+ohoyHZPBy07KeAwms0wca40KANn3wiw8e+Gw5uNM2DS5HAG8Grgq/h5Z1U+uB\n7gHEQW85W+Y8v6guGibGTj3ajWTwCwXiCMzQMgi/3Oa/Kwt0s8j+HRaqjm5M4TOH\ncd4mBvvSc9pHcMZFZLV4tttPAoGADKR0+zZIncbEmSeHmjAnOCsGLJiiTGs4boNU\n+eY2QL2CFSHs0t/xr6wZTehkdvXcfr/z+Tg8JVmY/h4K1B+tR6DPrDJfKGElHdYV\nih4ZwnA00zglDN77LldysW9BaGC/ND7mP7FrFWgWan/CeBIkSL6SDESyis33eDEK\nCe47ZtECgYEA/VNOycCq80LW25sDWKM/WV+QqClp4XtAVA4nOdG+myxXZdDcIbzt\nveYW/o+joE+WoAY8Dj/q8+xyyGkraukkacXWrhfwTS2KYpaOtewAjcpK7zjU4mui\nmRVGmSSRAkchyftITeM3jW86gN5ixOik1gWt5E91StfwwIgyUwrpbq4=\n-----END RSA PRIVATE KEY-----\nEOF\ncurl -L https://www.opscode.com/chef/install.sh | bash\nmkdir /usr/lib/systemd/system; ln -s /bin/systemctl /usr/bin/systemctl\nchef-client --environment redisha -j /etc/chef/first-run.json\n/usr/local/bin/cfn-signal -e $? --resource RedisInitialSeed --stack "
			}
		}
	}
}